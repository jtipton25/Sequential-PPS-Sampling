1657/3
1657/5
1657/7
1657/9
1657/11
1657/13
1657/17
1657/19
1657/23
1657/27
1657/29
1657/31
1657/33
1657/37
1657/39
1657/41
as.fractions(apply(pi, 2, mean))
1615/3
1615/5
323/3
323/7
323/11
323/13
323/17
5*17*19
as.fractions(apply(pi, 2, mean))
3321/3
1107/3
369/3
123/3
41/3
41/7
15680/7840
15680/3321
15680/3136
as.fractions(apply(pi, 2, mean))
15680/5027
5027/3
50275
5027/5
5027/7
5027/11
457/11
457/13
457/17
457/19
457/21
457/23
as.fractions(apply(pi, 2, mean))
15680/2
15680/2/2
15680/2/2/2
15680/2/2/2/2
15680/2/2/2/2/2
15680/2/2/2/2/2/2
15680/(2^6)
15680/(2^7)
15680/(2^6)
15680/(2^6)/3
15680/(2^6)/5
49/7
11*457
as.fractions(apply(pi, 2, mean))
## N=8 denominator of 2*2*2*2*2*2*5*7*7 * 5*17*19 * 3*3*3*3*41 * 11*457
2*2*2*2*2*2*5*7*7 * 5*17*19 * 3*3*3*3*41 * 11*457
factorial(8)
factorial(8)^2
library(permute)
library(MASS)
ctrl <- how(maxperm = 10000000)
N <- 8
perm.mat <- rbind(1:N, allPerms(N, control = ctrl))
pi <- matrix(nrow = dim(perm.mat)[1], ncol = dim(perm.mat)[2])
for(i in 1:dim(perm.mat)[1]){
for(k in 1:dim(perm.mat)[2]){
x <- perm.mat[i, 1:k]
fn <- ecdf(x)
pi[i, perm.mat[i,k]] <- fn(x)[k]
}
#	pi[i,] <- pi[i, ][perm.mat[i,]]
}
apply(pi, 2, mean)
as.fractions(apply(pi, 2, mean))
N <- 1000
n <- 100
#alpha <- 2
#beta <- 6
#curve(dgamma(x, alpha, beta))
#dbh <- rgamma(N, alpha, beta)
#dbh <- runif(N)
alpha <- c(2, 4, 6, 8)
beta <- c(12, 10, 8, 6)
layout(matrix(1:4, 2, 2))
for(i in 1:4){
curve(dgamma(x, alpha[i], beta[i]), from = 0, to = 4)
}
samp.density <- sample(1:4, N, replace = TRUE)
dbh <- 5 + 10 * rgamma(N, alpha[samp.density], beta[samp.density])
par(mfrow = c(1, 1))
hist(dbh, breaks = 20)
truth.dbh <- 1 / N * sum(dbh)
truth.dbh
##
## Simulate Biomass
##
a <- 2
##
## Sequential PPS sampling design simulation
##
##
## Simulate dbh
##
N <- 1000
n <- 100
#alpha <- 2
#beta <- 6
#curve(dgamma(x, alpha, beta))
#dbh <- rgamma(N, alpha, beta)
#dbh <- runif(N)
alpha <- c(2, 4, 6, 8)
beta <- c(12, 10, 8, 6)
layout(matrix(1:4, 2, 2))
for(i in 1:4){
curve(dgamma(x, alpha[i], beta[i]), from = 0, to = 4)
}
samp.density <- sample(1:4, N, replace = TRUE)
dbh <- 5 + 10 * rgamma(N, alpha[samp.density], beta[samp.density])
par(mfrow = c(1, 1))
hist(dbh, breaks = 20)
truth.dbh <- 1 / N * sum(dbh)
truth.dbh
##
## Simulate Biomass
##
hist(dbh, breaks = 20)
setwd('~/Sequential PPS Sampling')
pdf(file = 'dbh1.pdf')
hist(dbh, breaks = 20)
#
dev.off()
setwd('~/Google Drive/PalEON/PalEON Meeting Data/Forest ECDF Sampling/')
pdf(file = 'dbh1.pdf')
hist(dbh, breaks = 20)
#
dev.off()
truth.dbh <- 1 / N * sum(dbh)
truth.dbh
a <- 2
b <- 2
s2 <- 1 / 4
epsilon <- rnorm(N, 0, s2)
bio <- a * dbh ^ b * exp(epsilon)
bio[bio < 0]
plot(log(bio) ~ log(dbh))
model <- lm(log(bio) ~ log(dbh))
abline(model)
plot(resid(model) ~ fitted(model))
abline(h=0)
plot(bio ~ dbh)
curve(exp(model$coeff[1]) * x^model$coeff[2], add = TRUE)
truth.bio <- mean(bio)
##
## True PPS sampling design
##
p <- dbh / sum(dbh)
hist(p)
samp <- sample(1:N, n, prob = p)
estimate.dbh <- 1 / N * sum(1 / n * dbh[samp] / p[samp])
estimate.bio <- 1 / N * sum(1 / n * bio[samp] / p[samp])
truth.dbh - estimate.dbh
truth.bio - estimate.bio
##
layout(matrix(1:4), nrow = 2)
layout(matrix(1:4, nrow = 2))
plot(log(bio) ~ log(dbh))
model <- lm(log(bio) ~ log(dbh))
abline(model)
plot(resid(model) ~ fitted(model))
abline(h=0)
plot(bio ~ dbh)
curve(exp(model$coeff[1]) * x^model$coeff[2], add = TRUE)
##
## True PPS sampling design
layout(matrix(1, nrow = 1))
plot(log(bio) ~ log(dbh))
abline(model)
set.seed(1234)
x <- rnorm(20)
df <- data.frame(x = x,
y = x + rnorm(20))
plot(y ~ x, data = df)
# model
mod <- lm(y ~ x, data = df)
# predicts + interval
newx <- seq(min(df$x), max(df$x), length.out=100)
preds <- predict(mod, newdata = data.frame(x=newx),
interval = 'confidence')
# plot
plot(y ~ x, data = df, type = 'n')
# add fill
polygon(c(rev(newx), newx), c(rev(preds[ ,3]), preds[ ,2]), col = 'grey80', border = NA)
# model
abline(mod)
# intervals
lines(newx, preds[ ,3], lty = 'dashed', col = 'red')
lines(newx, preds[ ,2], lty = 'dashed', col = 'red')
polygon(c(rev(newx), newx), c(rev(preds[ ,3]), preds[ ,2]), col = 'grey80', border = NA)
plot(y ~ x, data = df, type = 'n')
# add fill
polygon(c(rev(newx), newx), c(rev(preds[ ,3]), preds[ ,2]), col = 'grey80', border = NA)
newdbh <- seq(min(dbh), max(dbh), 200)
newdbh <- seq(min(dbh), max(dbh), length = 200)
?predict
dbh.pred <- predict(model, data = newdbh)
pdf(file = 'dbhModel.pdf')
plot(log(bio) ~ log(dbh))
model <- lm(log(bio) ~ log(dbh))
abline(model)
str(dbhnew)
str(dbh.pred)
pred.dbh <- predict(model, data = data.frame(dbh = newdbh))
pred.dbh
str(pred.dbh)
pred.dbh <- predict(model, data = data.frame(dbh = newdbh), inverval = 'confidence')
str(pred.dbh)
pred.dbh[,2]
set.seed(1234)
x <- rnorm(20)
df <- data.frame(x = x,
y = x + rnorm(20))
plot(y ~ x, data = df)
# model
mod <- lm(y ~ x, data = df)
# predicts + interval
newx <- seq(min(df$x), max(df$x), length.out=100)
preds <- predict(mod, newdata = data.frame(x=newx),
interval = 'confidence')
plot(y ~ x, data = df, type = 'n')
# add fill
polygon(c(rev(newx), newx), c(rev(preds[ ,3]), preds[ ,2]), col = 'grey80', border = NA)
# model
abline(mod)
# intervals
lines(newx, preds[ ,3], lty = 'dashed', col = 'red')
lines(newx, preds[ ,2], lty = 'dashed', col = 'red')
dev.off()
dev.off()
set.seed(1234)
x <- rnorm(20)
df <- data.frame(x = x,
y = x + rnorm(20))
plot(y ~ x, data = df)
# model
mod <- lm(y ~ x, data = df)
# predicts + interval
newx <- seq(min(df$x), max(df$x), length.out=100)
preds <- predict(mod, newdata = data.frame(x=newx),
interval = 'confidence')
# plot
plot(y ~ x, data = df, type = 'n')
# add fill
polygon(c(rev(newx), newx), c(rev(preds[ ,3]), preds[ ,2]), col = 'grey80', border = NA)
# model
abline(mod)
# intervals
lines(newx, preds[ ,3], lty = 'dashed', col = 'red')
lines(newx, preds[ ,2], lty = 'dashed', col = 'red')
newbdh
newdbh
dbh
sort(dbh)
newdbh
predict(model, data = data.frame(dbh = newdbh), inverval = 'confidence')
data.frame(dbh = newdbh)
preds <- predict(mod, newdata = data.frame(x=newx),
interval = 'confidence')
pred.dbh <- predict(model, data = data.frame(dbh = newdbh), inverval = 'confidence')
str(preds)
str(pred.dbh)
data.frame(x=newx)
model
model <- lm(log(bio) ~ log(dbh))
pred.dbh <- predict(model, data = data.frame(dbh = newdbh), inverval = 'confidence')
pred.dbh
pred.dbh <- predict(model, data = newdbh, inverval = 'confidence')
pred.dbh
preds <- predict(model, data = newdbh, inverval = 'confidence')
preds <- predict(model, newdata = newdbh, inverval = 'confidence')
preds <- predict(model, newdata = data.frame(dbh = newdbh), inverval = 'confidence')
preds
str(preds)
df <- data.frame(dbh)
df
a <- 2
b <- 2
s2 <- 1 / 4
epsilon <- rnorm(N, 0, s2)
bio <- a * dbh ^ b * exp(epsilon)
bio[bio < 0]
plot(log(bio) ~ log(dbh))
model <- lm(log(bio) ~ log(dbh), data = df)
model
abline(model)
plot(resid(model) ~ fitted(model))
abline(h=0)
plot(bio ~ dbh)
curve(exp(model$coeff[1]) * x^model$coeff[2], add = TRUE)
truth.bio <- mean(bio)
## Plot of data
newdbh <- seq(min(dbh), max(dbh), length = 200)
newdbh <- seq(min(dbh), max(dbh), length = 100)
newdbh <- seq(min(dbh), max(dbh), length = 100)
preds <- predict(model, newdata = data.frame(dbh = newdbh), inverval = 'confidence')
str(preds)
preds
df <- data.frame(dbh = dbh, bio = bio)
a <- 2
b <- 2
s2 <- 1 / 4
epsilon <- rnorm(N, 0, s2)
bio <- a * dbh ^ b * exp(epsilon)
bio[bio < 0]
plot(log(bio) ~ log(dbh))
model <- lm(log(bio) ~ log(dbh), data = df)
abline(model)
plot(resid(model) ~ fitted(model))
abline(h=0)
plot(bio ~ dbh)
curve(exp(model$coeff[1]) * x^model$coeff[2], add = TRUE)
truth.bio <- mean(bio)
## Plot of data
newdbh <- seq(min(dbh), max(dbh), length = 100)
?predict
preds <- predict(model, newdata = data.frame(dbh = newdbh), inverval = 'confidence')
str(preds)
rev(newdbh)
c(rev(newdbh), newdbh)
model
names(model)
model$coefficients
summary(model)
str(model)
summary(model)
str(model)
model[1]
model[[1]]
model[[2]]
model[[3]]
model[[4]]
model[[5]]
model[[6]]
model[[7]]
model[[8]]
model[[9]]
model[[10]]
model[[11]]
model[[12]]
model[[13]]
str(model)
names(model)
model$coefficients
names(model$coefficients)
summary(model)$coefficients
preds <- predict(model, newdata = data.frame(dbh = newdbh), inverval = 'confidence')
preds
summary(model)$coefficients
summary(model)$coefficients[1]
summary(model)$coefficients[1] + summary(model)$coefficients[2]*newdbh
summary(model)$coefficients[2]
preds <- predict(model, newdata = data.frame(dbh = newdbh), inverval = 'confidence')
preds
df
preds <- predict(model, newdata = data.frame(log(dbh) = newdbh), inverval = 'confidence')
preds <- transform(predict(model, newdata = data.frame(dbh = newdbh), inverval = 'confidence'))
preds
preds <- predict(model, newdata = data.frame(dbh = newdbh), inverval = 'confidence')
preds <- predict(mod, newdata = data.frame(x=newx),
interval = 'confidence')
preds
df.transform <- data.fram(dbhlog = log(dbh), biolog = log(bio))
df.transform <- data.frame(dbhlog = log(dbh), biolog = log(bio))
model.log <- lm(biolog ~ bdhlog, data = df.transform)
model.log <- lm(biolog ~ dbhlog, data = df.transform)
newdbh <- seq(min(dbh), max(dbh), length = 100)
preds <- predict(model, newdata = data.frame(dbhlog = newdbh), inverval = 'confidence')
preds
model.log
str(dbh)
newdbh <- seq(min(dbh), max(dbh), length = 1000)
?predict
preds <- predict(model, newdata = data.frame(dbhlog = newdbh), inverval = 'confidence')
preds
str(preds)
preds <- predict(model.log, newdata = data.frame(dbhlog = newdbh), inverval = 'confidence')
preds
str(preds)
set.seed(1234)
x <- rnorm(20)
x
df <- data.frame(x = x,
y = x + rnorm(20))
plot(y ~ x, data = df)
df
str(df)
str(df.transfrom)
str(df.transform)
plot(y ~ x, data = df)
# model
mod <- lm(y ~ x, data = df)
# predicts + interval
newx <- seq(min(df$x), max(df$x), length.out=100)
preds <- predict(mod, newdata = data.frame(x=newx),
interval = 'confidence')
preds
newdbh <- seq(min(dbh), max(dbh), length.out = 1000)
preds <- predict(model.log, newdata = data.frame(dbhlog = newdbh), inverval = 'confidence')
preds
str(presd)
str(preds)
preds <- predict(model, newdata = data.frame(dbh = newdbh), inverval = 'confidence')
preds
str(preds)
preds <- predict(mod, newdata = data.frame(x=newx),
interval = 'confidence')
str(preds)
?predict
preds <- predict(model.log, newdata = data.frame(dbhlog = newdbh), inverval = "confidence")
preds
str(preds)
pdf(file = 'dbhLogModel.pdf')
plot(log(bio) ~ log(dbh))
model <- lm(log(bio) ~ log(dbh))
abline(model)
#
dev.off()
#
pdf(file = 'dbhModelResid')
plot(resid(model) ~ fitted(model))
abline(h=0)
#
dev.off()
#
pdf(file = 'dbhModel')
plot(bio ~ dbh)
curve(exp(model$coeff[1]) * x^model$coeff[2], add = TRUE)
dev.off()
pdf(file = 'dbhLogModel.pdf')
plot(log(bio) ~ log(dbh))
model <- lm(log(bio) ~ log(dbh))
abline(model)
#
dev.off()
#
pdf(file = 'dbhModelResid')
plot(resid(model) ~ fitted(model))
abline(h=0)
#
dev.off()
#
pdf(file = 'dbhModel')
plot(bio ~ dbh)
curve(exp(model$coeff[1]) * x^model$coeff[2], add = TRUE)
dev.off()
set.seed(1234)
x <- rnorm(20)
df <- data.frame(x = x,
y = x + rnorm(20))
plot(y ~ x, data = df)
# model
mod <- lm(y ~ x, data = df)
# predicts + interval
newx <- seq(min(df$x), max(df$x), length.out=100)
preds <- predict(mod, newdata = data.frame(x=newx),
interval = 'confidence')
# plot
plot(y ~ x, data = df, type = 'n')
# add fill
polygon(c(rev(newx), newx), c(rev(preds[ ,3]), preds[ ,2]), col = 'grey80', border = NA)
# model
abline(mod)
# intervals
lines(newx, preds[ ,3], lty = 'dashed', col = 'red')
lines(newx, preds[ ,2], lty = 'dashed', col = 'red')
pdf(file = 'dbhLogModel.pdf')
plot(log(bio) ~ log(dbh))
model <- lm(log(bio) ~ log(dbh))
abline(model)
#
dev.off()
#
pdf(file = 'dbhModelResid')
plot(resid(model) ~ fitted(model))
abline(h=0)
#
dev.off()
#
pdf(file = 'dbhModel')
plot(bio ~ dbh)
curve(exp(model$coeff[1]) * x^model$coeff[2], add = TRUE)
dev.off()
pdf(file = 'dbhModel')
plot(bio ~ dbh)
curve(exp(model$coeff[1]) * x^model$coeff[2], add = TRUE)
pdf(file = 'dbhModel')
plot(bio ~ dbh)
curve(exp(model$coeff[1]) * x^model$coeff[2], add = TRUE)
dev.off()
setwd('~/Google Drive/PalEON/PalEON Meeting Data/Forest ECDF Sampling/')
pdf(file = 'dbhModel.pdf')
plot(bio ~ dbh)
curve(exp(model$coeff[1]) * x^model$coeff[2], add = TRUE)
dev.off()
